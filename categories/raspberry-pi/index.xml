<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on Toni&#39;s Blog</title>
    <link>https://czyrnik.me/categories/raspberry-pi/</link>
    <description>Toni&#39;s Blog (Raspberry Pi)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://czyrnik.me/categories/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Configure a Raspberry Pi</title>
      <link>https://czyrnik.me/blog/how-to-configure-a-raspberry-pi/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyrnik.me/blog/how-to-configure-a-raspberry-pi/</guid>
      <description>&lt;p&gt;We will secure your Raspberry Pi, create a wireless access point and learn how backup the SD Card of the Raspberry Pi. ðŸ¤“&lt;/p&gt;
&lt;h2 id=&#34;securing-your-raspberry-pi&#34;&gt;Securing your Raspberry Pi
&lt;span&gt;&lt;a href=&#34;#securing-your-raspberry-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Please make sure, that your Overlay File System is deactivated and the boot partition writable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you deactivated the Overlay File System, please reboot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;passwordless-ssh-access&#34;&gt;Passwordless SSH Access
&lt;span&gt;&lt;a href=&#34;#passwordless-ssh-access&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Please check, whether you have already created SSH Keys in the past. If there are files like &amp;ldquo;id_rsa.pub&amp;rdquo; or &amp;ldquo;id_dsa.pub&amp;rdquo;, you don&amp;rsquo;t need to generate new keys.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ls ~/.ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;generate-new-ssh-keys&#34;&gt;Generate new SSH Keys
&lt;span&gt;&lt;a href=&#34;#generate-new-ssh-keys&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;You can generate the keys with or without a passphrase using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You check them with this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;copy-the-key-to-the-raspberry-pi&#34;&gt;Copy the Key to the Raspberry Pi
&lt;span&gt;&lt;a href=&#34;#copy-the-key-to-the-raspberry-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Now, you can transfer your Key to the Raspberry Pi using ssh.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-copy-id &amp;lt;USERNAME&amp;gt;@&amp;lt;IP-ADDRESS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;storing-the-passphrase-in-the-macos-keychain&#34;&gt;Storing the passphrase in the macOS keychain
&lt;span&gt;&lt;a href=&#34;#storing-the-passphrase-in-the-macos-keychain&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;You can store your passphrase in the macOS keychain using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-add --apple-use-keychain ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;allow-and-deny-ssh-access&#34;&gt;Allow and Deny SSH Access
&lt;span&gt;&lt;a href=&#34;#allow-and-deny-ssh-access&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;You can specify which users are allowed to use SSH using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Append to the end of the file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AllowUsers alice bob
DenyUsers jane john
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find all created users, which have a home directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /etc/passwd | grep home
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;using-key-based-authentication-only&#34;&gt;Using key-based authentication only
&lt;span&gt;&lt;a href=&#34;#using-key-based-authentication-only&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Let&amp;rsquo;s make one additional adjustment, so only key-based authentication are allowed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Search and edit the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;wireless-access-point&#34;&gt;Wireless Access Point
&lt;span&gt;&lt;a href=&#34;#wireless-access-point&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If your WiFi is unreliable but you have access to an ethernet cable, you could try to set up a wireless access point with your Raspberry Pi!&lt;/p&gt;
&lt;p&gt;You can read a great tutorial for setting up a Routed Wireless Access Point in the &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/configuration.html#setting-up-a-routed-wireless-access-point&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I used the following &amp;ldquo;hostapd.conf&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ctrl_interface=/var/run/hostapd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#ctrl_interface_group=0
interface=wlan0
driver=nl80211&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### IEEE 802.11
ssid=YOUR__SSID
wpa_passphrase=YOUR__PASSWORD
# a = 5 GHz, g = 2.4 GHz
hw_mode=a
# 36 or 149
channel=149
# 1=wpa, 2=wep, 3=both
auth_algs=1

### DFS
country_code=US
# allowed channels and transmit power levels based on the regulatory limits
ieee80211d=1
# enables radar detection and DFS support
ieee80211h=1

### IEEE 802.11n
ieee80211n=1
require_ht=1
ht_capab=[HT20][HT40+][SHORT-GI-20][SHORT-GI-40][DSSS_CCK-40]

### IEEE 802.11ac
ieee80211ac=1
# 0 = 20 or 40 MHz operating Channel width
# 1 = 80 MHz channel width
# 2 = 160 MHz channel width
# 3 = 80+80 MHz channel width
vht_oper_chwidth=1
# channel + 6 for 80 MHz
# 42 or 155
vht_oper_centr_freq_seg0_idx=155
vht_capab=[SHORT-GI-80][MAX-MPDU-3895][SU-BEAMFORMEE]

### IEEE 802.11i
wpa=2
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP

### WMM
wmm_enabled=1
uapsd_advertisement_enabled=1

### logging
# Module bitfield (-1 = all)
# bit 0 (1) = IEEE 802.11
# bit 1 (2) = IEEE 802.1X
# bit 2 (4) = RADIUS
# bit 3 (8) = WPA
# bit 4 (16) = driver interface
# bit 5 (32) = IAPP
# bit 6 (64) = MLME

# Levels (minimum value for logged events):
#  0 = verbose debugging
#  1 = debugging
#  2 = informational messages
#  3 = notification
#  4 = warning

logger_syslog=-1
logger_syslog_level=4
logger_stdout=-1
logger_stdout_level=4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;finding-your-channel&#34;&gt;Finding your channel
&lt;span&gt;&lt;a href=&#34;#finding-your-channel&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You can view possible channels with the following.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iw list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look at your current config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iw dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on the chosen country, there are different frequencies possible. You can look on &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_WLAN_channels#5_GHz_(802.11a/h/j/n/ac/ax)&#34;&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iw reg get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to know what channels are busy in your environment, you need to install nmcli.&lt;/p&gt;
&lt;p&gt;With this service, we get a list of available wifi networks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmcli dev wifi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can force a rescan:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nmcli dev wifi rescan
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;installing--network-management-command-line-interface-nmcli&#34;&gt;Installing  Network Management Command-Line Interface (nmcli)
&lt;span&gt;&lt;a href=&#34;#installing--network-management-command-line-interface-nmcli&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Let&amp;rsquo;s install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install network-manager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can start the service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start NetworkManager.service 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But make sure, that it is not enabled!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl disable NetworkManager.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;testing-the-connection&#34;&gt;Testing the Connection
&lt;span&gt;&lt;a href=&#34;#testing-the-connection&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You can test the connection speed between your computer and the Pi using iPerf.&lt;/p&gt;
&lt;h4 id=&#34;preparing-the-raspberry-pi&#34;&gt;Preparing the Raspberry Pi
&lt;span&gt;&lt;a href=&#34;#preparing-the-raspberry-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Install iperf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install iperf3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&amp;rsquo;t know the IP address of your pi. Use the following on your Raspberry Pi.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostname -I
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s start the server!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf3 -s
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;preparing-the-mac&#34;&gt;Preparing the Mac
&lt;span&gt;&lt;a href=&#34;#preparing-the-mac&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Install iperf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install iperf3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run your mac as client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iperf3 -c IP_ADDRESS
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;results&#34;&gt;Results
&lt;span&gt;&lt;a href=&#34;#results&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Now, you can see your network speed between your Mac and Raspberry Pi.&lt;/p&gt;
&lt;h3 id=&#34;testing-your-internet-with-speedtest&#34;&gt;Testing your internet with speedtest
&lt;span&gt;&lt;a href=&#34;#testing-your-internet-with-speedtest&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You will find the official instruction &lt;a href=&#34;https://www.speedtest.net/en/apps/cli&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install curl

curl -s https://install.speedtest.net/app/cli/install.deb.sh | sudo bash

sudo apt-get install speedtest
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;backing-up-the-sd-card&#34;&gt;Backing up the SD Card
&lt;span&gt;&lt;a href=&#34;#backing-up-the-sd-card&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The most simple way to backup your Pi is coping all the files from the SD card. But creating an image is more reliable. You could store these files on your Mac or iCloud.&lt;/p&gt;
&lt;h3 id=&#34;creating-an-image-using-macos&#34;&gt;Creating an image using macOS
&lt;span&gt;&lt;a href=&#34;#creating-an-image-using-macos&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s find the name of our SD card using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diskutil list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s create the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dd if=/dev/DISK_NAME status=progress | gzip -c &amp;gt; PiBackup.dmg.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes a while and will save the image into your user directory. The whole SD-card is copied and afterwards compressed.&lt;/p&gt;
&lt;h3 id=&#34;restoring-the-image-using-macos&#34;&gt;Restoring the image using macOS
&lt;span&gt;&lt;a href=&#34;#restoring-the-image-using-macos&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Before we can restore a backup, we need to unmount the SD card.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diskutil unmountDisk /dev/disk_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can restore our backup image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zcat PiBackup.dmg.gz | dd of=/dev/disk_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;optional-overlay-file-system&#34;&gt;Optional: Overlay File System
&lt;span&gt;&lt;a href=&#34;#optional-overlay-file-system&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Changes made are not permanently during Overlay File System is activated. Everything that was changed will not be available once the Pi rebooted. Also, you can make your boot partition read only. That should increase your reliability of the system. But don&amp;rsquo;t forget to disable it before starting your next project!&lt;/p&gt;
&lt;p&gt;You will find the setting here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to &amp;ldquo;Performance Options&amp;rdquo; and &amp;ldquo;Overlay File System&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;span&gt;&lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;That were a few first useful configurations for your Raspberry Pi!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to use a Raspberry as Time Capsule</title>
      <link>https://czyrnik.me/blog/how-to-use-a-raspberry-as-time-capsule/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyrnik.me/blog/how-to-use-a-raspberry-as-time-capsule/</guid>
      <description>&lt;h2 id=&#34;setup-raspberry-pi&#34;&gt;Setup Raspberry Pi
&lt;span&gt;&lt;a href=&#34;#setup-raspberry-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If you want to read about our basic Raspberry Setup: &lt;a href=&#34;https://czyrnik.me/blog/how-to-set-up-a-raspberry-pi/&#34;&gt;Here you go!&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prepare-the-external-drive&#34;&gt;Prepare the external drive
&lt;span&gt;&lt;a href=&#34;#prepare-the-external-drive&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The most important thing is going to be your connected hard drive. We need a drive that uses HFS+ or APFS. Otherwise, we cannot use it for Time Machine. Currently, there&amp;rsquo;s only a reliable read-only version for APFS on Linux. So, we are going to use HFS+ instead.&lt;/p&gt;
&lt;p&gt;Please make sure you format your drive correctly and do not forget to give read and write permissions to everyone using &amp;ldquo;Get Info&amp;rdquo; on your Mac.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./permissions.png&#34; alt=&#34;Permissions&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;mounting-our-hard-drive&#34;&gt;Mounting our Hard Drive
&lt;span&gt;&lt;a href=&#34;#mounting-our-hard-drive&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;After we connected your drive to the Pi, we need to mount it. Otherwise we cannot access it. The Format HFS+ is not native to Linux. So, we need to install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install hfsprogs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After installing it, we need to find the name of our drive.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsblk -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The name of my drive is &amp;ldquo;sda2&amp;rdquo;. You&amp;rsquo;ll find yours looking at the format and the size.&lt;/p&gt;
&lt;h3 id=&#34;creating-a-mount-point&#34;&gt;Creating a Mount Point
&lt;span&gt;&lt;a href=&#34;#creating-a-mount-point&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Before mounting a drive, we&amp;rsquo;ll need a mount point! Let&amp;rsquo;s create a directory. You can choose the path to your point as you like. I chose &amp;ldquo;/TM&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mkdir -p /TM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s mount our drive!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount -t hfsplus -o force,rw /dev/name_of_your_drive /your_mount_point
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, the drive is not yet mounted permanently. Let&amp;rsquo;s do that! Let&amp;rsquo;s find the &amp;ldquo;PARTUUID&amp;rdquo; of your drive fist.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo blkid /dev/sda2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s open the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add this line with your &amp;ldquo;PARTUUID&amp;rdquo; to the bottom of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PARTUUID=&amp;quot;your_partuuid&amp;quot; /your_mountpoint     hfsplus force,rw,user,auto        0       0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, your drive will be mounted after every boot of the Pi! ðŸ¤¯&lt;/p&gt;
&lt;h2 id=&#34;preparing-everything-for-time-machine&#34;&gt;Preparing everything for Time Machine
&lt;span&gt;&lt;a href=&#34;#preparing-everything-for-time-machine&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Before the can access the drive from our Mac, we need couple of additional tweaks.&lt;/p&gt;
&lt;h3 id=&#34;installing-samba-and-avahi&#34;&gt;Installing Samba and Avahi
&lt;span&gt;&lt;a href=&#34;#installing-samba-and-avahi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Samba is used for the file server.&lt;/p&gt;
&lt;p&gt;Avahi emulates a Time Capsule and our drive get&amp;rsquo;s automatically discovered by MacOS. ðŸ”Ž&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s install everything on our Raspberry Pi.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install samba avahi-daemon
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creating-a-new-user-on-the-pi&#34;&gt;Creating a new user on the Pi
&lt;span&gt;&lt;a href=&#34;#creating-a-new-user-on-the-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s add a user &amp;ldquo;timemachine&amp;rdquo; for dealing with all our Time Machine stuff!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo adduser timemachine
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the user, you&amp;rsquo;ll be prompted to enter a password for the new user on your Raspberry Pi.&lt;/p&gt;
&lt;h3 id=&#34;configurating-samba&#34;&gt;Configurating Samba
&lt;span&gt;&lt;a href=&#34;#configurating-samba&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;We need to define a password for Samba. I used the same password for convenience.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo smbpasswd -a timemachine
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The need to define same details for Samba. &amp;ldquo;Time Machine&amp;rdquo; will be the name for our server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add these lines to end of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Time Machine]
	comment = Backups
	path = /your_mount_point
	valid users = timemachine
	read only = no
	vfs objects = catia fruit streams_xattr
	fruit:time machine = yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes will be affective after reloading Samba!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service smbd reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configurating-avahi&#34;&gt;Configurating Avahi
&lt;span&gt;&lt;a href=&#34;#configurating-avahi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Almost done! ðŸ™‚&lt;/p&gt;
&lt;p&gt;We need to configure Avahi. Lets open the following file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/avahi/services/samba.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The need to copy all the following into this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&#39;no&#39;?&amp;gt;&amp;lt;!--*-nxml-*--&amp;gt;
&amp;lt;!DOCTYPE service-group SYSTEM &amp;quot;avahi-service.dtd&amp;quot;&amp;gt;
&amp;lt;service-group&amp;gt;
  &amp;lt;name replace-wildcards=&amp;quot;yes&amp;quot;&amp;gt;%h&amp;lt;/name&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_smb._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;445&amp;lt;/port&amp;gt;
  &amp;lt;/service&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_device-info._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;9&amp;lt;/port&amp;gt;
    &amp;lt;txt-record&amp;gt;model=TimeCapsule8,119&amp;lt;/txt-record&amp;gt;
  &amp;lt;/service&amp;gt;
  &amp;lt;service&amp;gt;
    &amp;lt;type&amp;gt;_adisk._tcp&amp;lt;/type&amp;gt;
    &amp;lt;port&amp;gt;9&amp;lt;/port&amp;gt;
    &amp;lt;txt-record&amp;gt;dk0=adVN=Time Machine,adVF=0x82&amp;lt;/txt-record&amp;gt;
    &amp;lt;txt-record&amp;gt;sys=adVF=0x100&amp;lt;/txt-record&amp;gt;
  &amp;lt;/service&amp;gt;
&amp;lt;/service-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s reload the service, so the changes will be affective:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo service avahi-daemon reload
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, your raspberry should be recognized as a Time Capsule!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./time_capsule.png&#34; alt=&#34;Show what you got!&#34;&gt;&lt;/p&gt;
&lt;p&gt;Time Machine, here I come! ðŸš€&lt;/p&gt;
&lt;h2 id=&#34;configuration-time-machine&#34;&gt;Configuration Time Machine
&lt;span&gt;&lt;a href=&#34;#configuration-time-machine&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Your drive should now be detected by the Time Machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./time_machine.png&#34; alt=&#34;Safety First!&#34;&gt;&lt;/p&gt;
&lt;p&gt;Do not forget to encrypt your backups!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./connect.png&#34; alt=&#34;pwnd&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can use the user &amp;ldquo;timemachine&amp;rdquo; and the Samba password you chose earlier.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;span&gt;&lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ve seen how to emulate a Time Capsule using a Raspberry Pi. Due to the small size of the Raspberry Pi, it&amp;rsquo;s a very portable backup solution, which can be taken everywhere!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to set up a Raspberry Pi</title>
      <link>https://czyrnik.me/blog/how-to-set-up-a-raspberry-pi/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyrnik.me/blog/how-to-set-up-a-raspberry-pi/</guid>
      <description>&lt;h2 id=&#34;why-should-you-care&#34;&gt;Why should you care?
&lt;span&gt;&lt;a href=&#34;#why-should-you-care&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Did you ever wonder would be possible to do with a small computer? What could possibly be worth your time to get into programming a Raspberry Pi?&lt;/p&gt;
&lt;p&gt;Yeah, me too. Especially all the time that could be necessary to maintain our weekend projects along the way. In last couple of months I used my Raspberry Pi to ease my life as digital nomad! That&amp;rsquo;s why, I want to share with you my journey!&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-sd-card&#34;&gt;Setting up the SD Card
&lt;span&gt;&lt;a href=&#34;#setting-up-the-sd-card&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;There are great tutorial on the process of setting up a Raspberry Pi. I wanted to keep it simple. So, I used &lt;strong&gt;Raspberry Pi OS&lt;/strong&gt;. There&amp;rsquo;s an &lt;a href=&#34;https://www.raspberrypi.com/software/&#34;&gt;official tool&lt;/a&gt; for creating the SD card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./tool.png&#34; alt=&#34;Official Tool&#34;&gt;&lt;/p&gt;
&lt;p&gt;Because of my Raspberry Pi 4, I chose the &lt;strong&gt;64 bit&lt;/strong&gt; version. I also went with the &lt;strong&gt;lite&lt;/strong&gt; version, meaning command line only.&lt;/p&gt;
&lt;p&gt;If you want to set further settings like ssh, custom credentials and wireless LAN, click on the gearwheel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./options.png&#34; alt=&#34;Advanced Options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, your SD card is ready to go! ðŸŽ‰&lt;/p&gt;
&lt;h3 id=&#34;connect-to-your-raspberry-pi&#34;&gt;Connect to your Raspberry Pi
&lt;span&gt;&lt;a href=&#34;#connect-to-your-raspberry-pi&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Your Pi boots automatically after powering it. Give it couple of moments!&lt;/p&gt;
&lt;p&gt;Meanwhile, let&amp;rsquo;s make sure your ssh connection will run smoothly.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to clear old references:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -R raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can connect to your Pi using your chosen credentials:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh username@ip
e.g.: ssh pi@raspberrypi.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default credentials for any Raspberry Pi running Raspberry Pi OS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;username: pi
password: raspberry
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;preventing-wifi-dropping&#34;&gt;Preventing WiFi Dropping
&lt;span&gt;&lt;a href=&#34;#preventing-wifi-dropping&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If you want to be on the safe side, you should disable the power management for your wlan on the Pi. Open the following file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/rc.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Insert above the &amp;ldquo;exit 0&amp;rdquo; the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/sbin/iw wlan0 set power_save off
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;changing-credentials-and-further-configuration&#34;&gt;Changing Credentials and Further Configuration
&lt;span&gt;&lt;a href=&#34;#changing-credentials-and-further-configuration&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;d like to change your credentials in the future, just use the raspi-config! There are many more things to tweak as well. Have a look!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;updating-software&#34;&gt;Updating Software
&lt;span&gt;&lt;a href=&#34;#updating-software&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You probably want to update your Raspberry Pi down the line. Just use this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update 
sudo apt-get upgrade 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;span&gt;&lt;a href=&#34;#conclusion&#34;&gt;#&lt;/a&gt;&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;That was the fast track to get your Raspberry Pi up and running. If you need further assistance, check out the &lt;a href=&#34;https://www.raspberrypi.com/documentation/computers/getting-started.html&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use this setup for the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://czyrnik.me/blog/how-to-use-a-raspberry-as-time-capsule&#34;&gt;Emulating a Time Capsule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
